@model WIPSystem.Web.ViewModels.ProductProcessRegistrationViewModel
@using WIPSystem.Web.Models

@{

    ViewBag.Title = "RegisterProcessFlow";
}
<div class="container">
    <div class="row">
        <div class="col-md-12">
            <h2 class="text-uppercase text-center">Register Partno Process Flow</h2>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12 border-1 border">
            <form id="processForm" method="post" asp-action="SaveProcessFlow">
                <input type="hidden" asp-for="ProductId" />

                <div class="form-group">
                    <label asp-for="PartNo">PartNo</label>
                    <input type="text" asp-for="PartNo" class="form-control" readonly />
                </div>

                <div class="form-group">
                    <label asp-for="CustName">Customer Name</label>
                    <input type="text" asp-for="CustName" class="form-control" readonly />
                </div>

                <div id="processContainer">
                    @if (Model.AvailableProcesses != null && Model.AvailableProcesses.Any())
                    {
                        for (int i = 0; i < Model.SelectedProcesses.Count; i++)
                        {
                            <div class="form-group row">
                                <div class="col-sm-4">
                                    <select asp-for="@Model.SelectedProcesses[i].ProcessId" asp-items="@(new SelectList(Model.AvailableProcesses, "ProcessId", "ProcessName"))" class="form-control"></select>
                                </div>
                                <div class="col-sm-4">
                                    <input type="number" asp-for="@Model.SelectedProcesses[i].Sequence" class="form-control" placeholder="Enter sequence for selected process" />
                                </div>
                                <div class="col-sm-4">
                                    <button type="button" class="btn btn-danger remove-process"><i class="bi bi-trash"></i></button>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <p>No available processes to display.</p>
                    }
                </div>
                <button type="button" id="addAnotherProcess" class="btn btn-success">
                    <i class="fas fa-plus-circle"></i> Add Process
                </button>
                <button type="submit" class="btn btn-primary">Submit</button>
                <!-- Back Button -->
                <button type="button" class="btn btn-secondary" onclick="window.history.back();">Back</button>
            </form>

        </div>
    </div>
</div>
@section Scripts {
    <script>
        // Check if a process is already selected
        function isProcessAlreadySelected(processId) {
            var selects = document.querySelectorAll('#processContainer select');
            var selectedValues = Array.from(selects).map(select => select.value);
            var uniqueSelectedValues = new Set(selectedValues);
            return uniqueSelectedValues.size !== selectedValues.length;
        }

        // Function to add a new process selection row
        function addNewProcess(currentProcessCount) {
            var processContainer = document.getElementById('processContainer');

            // Create the row div
            var rowDiv = document.createElement('div');
            rowDiv.className = 'row form-group';

            // Create the select element for processes
            var select = document.createElement('select');
            select.name = `SelectedProcesses[${currentProcessCount}].ProcessId`;
            select.className = 'form-control col-sm-2';
            select.style.marginLeft = '10px'; // Add left margin to the button
        @foreach (var process in Model.AvailableProcesses)
        {
            <text>
                var option = document.createElement('option');
                option.value = "@process.ProcessId";
                option.text = "@process.ProcessName";
                select.appendChild(option);
            </text>
        }

                    // Create the input element for the sequence
                    var input = document.createElement('input');
            input.type = 'number';
            input.name = `SelectedProcesses[${currentProcessCount}].Sequence`;
            input.className = 'form-control col-sm-2';
            input.placeholder = 'Sequence';
            input.value = currentProcessCount + 1; // Auto-increment the sequence
            // input.disabled = true; // Disable the input
            input.style.marginLeft = '10px'; // Add left margin to the button


            // Create the remove button
            var removeButton = document.createElement('button');
            removeButton.type = 'button';
            removeButton.className = 'btn btn-danger col-sm-1';
            removeButton.innerHTML = '<i class="bi bi-trash"></i>';
            removeButton.style.marginLeft = '10px'; // Add left margin to the button
            removeButton.onclick = function () {
                processContainer.removeChild(rowDiv);
            };

            rowDiv.appendChild(select);
            rowDiv.appendChild(input);
            rowDiv.appendChild(removeButton);

            processContainer.appendChild(rowDiv);
        }

        document.addEventListener('DOMContentLoaded', function () {
            var currentProcessCount = @Model.SelectedProcesses.Count;
            var addAnotherProcessButton = document.getElementById('addAnotherProcess');

            addAnotherProcessButton.addEventListener('click', function () {
                if (isProcessAlreadySelected()) {
                    alert('Each process can only be selected once. Please select a different process.');
                    return;
                }
                addNewProcess(currentProcessCount);
                currentProcessCount++;
            });

            $('#processForm').submit(function (e) {
                e.preventDefault();
                if (isProcessAlreadySelected()) {
                    alert('Each process can only be selected once. Please select different processes.');
                    return;
                }

                var formData = $(this).serialize(); // Use jQuery's serialize function for form data

                $.ajax({
                    type: 'POST',
                    url: '/Product/SaveProcessFlow',
                    data: formData, // Send formData as is, no need for JSON.stringify
                    success: function (response) {
                        if (response.success) {
                            alert('Process flow added successfully.');
                            window.location.href = '/Product/Index';
                        } else {
                            alert(response.message || 'An error occurred while saving the process flow.');
                        }
                    },
                    error: function (xhr, status, error) {
                        alert('An error occurred: ' + xhr.responseText);
                    }
                });
            });
        });
    </script>
}




